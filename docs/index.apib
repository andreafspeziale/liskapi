FORMAT: 0.1.0
# Lisk APIs Wrapper

## Group Introduction
This library aims to make **[LISK APIs](https://lisk.io/documentation?i=lisk-docs/APIReference)** easy/smart to use.

Note: **[Lisk](https://lisk.io/)** is a blockchain application platform and crypto-currency, which offers an all round solution for Node.js and JavaScript developers to deploy their own blockchain applications.

The library smart handle all the **Lisk APIs call** with options like sorting and pagination. The dApps ones are not included at the moment. 

# Installation
The library is available through the 

+ npm package manager
    
        $ npm install liskapi
    
# Configuration
To performs the requests the library can use a local or remote Lisk node:

+ Require the lib using a local node

        const lisk = require ('liskapi')();
        
+ Require the lib using a remote node

        const params = {
                host: 'othernode.com',
                port: 8000,
                ssl: true
            };
        
        const lisk = require ('liskapi')(params);

## Group Accounts

API calls related to Account functionality.

## openAccount
 
+ Parameters

    + secret: "some secret sentence" (required, string) - Password of the account you want to create.
    
+ Usage

        lisk.openAccount ()
            .data ({ secret: 'some secret sentence' })
            .call ()
            .then ((res) => {
                console.log (`Post for opening an account\n ${JSON.stringify (res)}`);
            })
            .catch ((err) => {
                console.log ('Got an error opening an account\n', err);
            });
            
+ Response 200 (application/json)

        {
          "success": true,
          "account": {
            "address": "Address of account. String",
            "unconfirmedBalance": "Unconfirmed balance of account. Integer",
            "balance": "Balance of account. Integer",
            "publicKey": "Public key of account. Hex",
            "unconfirmedSignature": "If account enabled second signature, but it's still not confirmed. Boolean: true or false",
            "secondSignature": "If account enabled second signature. Boolean: true or false",
            "secondPublicKey": "Second signature public key. Hex",
            "username": "Username of account."
          }
        }

## getBalance

+ Parameters

    + address: "some address" (string) - Request the balance of an account by address.
    
+ Usage

        lisk.getBalance ({ address: 'address' })
            .call ()
            .then ((res) => {
                console.log (`Get balance\n ${JSON.stringify (res)}`);
            })
            .catch ((err) => {
                console.log ('Got an error in getting balance\n', err);
            });
            
+ Response 200 (application/json)

        {
          "success": true,
          "balance": "Balance of account",
          "unconfirmedBalance": "Unconfirmed balance of account"
        }

## getPublicKey

+ Parameters

    + address: "some address" (string) - Get the public key of an account.
    
+ Usage

        lisk.getPublicKey ({ address: 'address' })
            .call ()
            .then ((res) => {
                console.log (`Get public key\n ${JSON.stringify (res)}`);
            })
            .catch ((err) => {
                console.log ('Got an error in getting public key\n', err);
            });
            
+ Response 200 (application/json)

        {
          "success": true,
          "publicKey": "Public key of account. Hex"
        }
        
## generatePublicKey

+ Parameters

    + secret: "some secret sentence" (required, string) - Returns the public key of the provided secret key.
    
+ Usage

        lisk.generatePublicKey ()
            .data ({ secret: 'some secret sentence' })
            .call ()
            .then ((res) => {
                console.log (`Post for generating a publicKey\n ${JSON.stringify (res)}`);
            })
            .catch ((err) => {
                console.log ('Got an error generating a publicKey\n', err);
            });
            
+ Response 200 (application/json)

        {
          "success": true,
          "publicKey": "Public key of account. Hex"
        }
        
## getAccount

+ Parameters

    + address: "some address" (string) - Returns account information of an address.
    
+ Usage

        lisk.getAccount ({ address: 'address' })
            .call ()
            .then ((res) => {
                console.log (`Getting an account\n ${JSON.stringify (res)}`);
            })
            .catch ((err) => {
                console.log ('Got an error getting an account\n', err);
            });
            
+ Response 200 (application/json)

        {
          "success": true,
          "account": {
            "address": "Address of account. String",
            "unconfirmedBalance": "Unconfirmed balance of account. Integer",
            "balance": "Balance of account. Integer",
            "publicKey": "Public key of account. Hex",
            "unconfirmedSignature": "If account enabled second signature, but it's still not confirmed. Boolean: true or false",
            "secondSignature": "If account enabled second signature. Boolean: true or false",
            "multisignatures": "Array"
            "u_multisignatures": "Array"
          }
        }

<!--

## .getAccount

## .getDelegatesByAddress

## .voteDelegates-->

<!--
## Group Loader
## Group Transactions
## Group Peers
## Group Blocks
## Group Signatures
## Group Delegates
## Group Multi-Signature-->
