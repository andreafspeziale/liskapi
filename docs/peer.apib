## getPeersList

Gets list of peers from provided filter parameters.

+ Parameters

      + state: "state of peer. 1 - disconnected. 2 - connected. 0 - banned." (number)
      + os: "peer operating system" (string)
      + version: "peer version" (string)

+ Options

    + pagination (limit and offset)
    + sorting

+ Usage

        lisk.getPeersList ( { state: 1 } )
            .paginate ( { limit: 10, offset: 5 } )
            .call ()
            .then ((res) => {
                console.log (`Get peers of Liskword\n ${JSON.stringify (res)}`);
            })
            .catch ((err) => {
                console.log ('Got an error in getting peers\n', err);
            });

+ Response 200 (application/json)

        {
          "success": true,
          "peers": [
            "list of peers as objects (see below the peer object response)"
          ]
        }


## getPeer

Gets peer by IP address and port.

+ Parameters

      + ip: "host IP" (string)
      + port: "host port used for the Lisk application" (number)

+ Usage

        lisk.getPeer ( { ip: 'IP', port: port } )
            .call ()
            .then ((res) => {
                console.log (`Get peer by IP\n ${JSON.stringify (res)}`);
            })
            .catch ((err) => {
                console.log ('Got an error in getting peer\n', err);
            });

+ Response 200 (application/json)

        {
          "success": true,
          "peer": {
                "ip": "Requested ip. String",
                "port": "Requested port. Integer",
                "state": "1 - disconnected. 2 - connected. 0 - banned. Integer",
                "os": "Operating system. String",
                "version": "Lisk client version. String",
                "broadhash": "Peer block propagation efficiency and reliability. String",
                "height": "Blockchain height. Integer"
          }
        }

## getPeerVersion

Gets a list peer versions and build times.

+ Usage

        lisk.getPeerVersion ()
            .call ()
            .then ((res) => {
                console.log (`Get peer version\n ${JSON.stringify (res)}`);
            })
            .catch ((err) => {
                console.log ('Got an error in getting peer version\n', err);
            });

+ Response 200 (application/json)

        {
          "success": true,
          "version": "Version of Lisk. String",
          "build": "Time of build. String"
        }